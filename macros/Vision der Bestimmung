if (!actor) {
  ui.notifications.error("Kein Actor gefunden – bitte Makro ausführen, während ein Actor ausgewählt ist.");
  return;
}

(async () => {
  // Schicksalspunkt prüfen
  let currentFate = getProperty(actor.system, "status.fatePoints.value") ?? 0;
  if (currentFate <= 0) {
    ui.notifications.warn(`${actor.name} hat keinen Schicksalspunkt zur Verfügung.`);
    return;
  }

  // Schicksalspunkt abziehen
  await actor.update({ "system.status.fatePoints.value": currentFate - 1 });

  // Fertigkeit "Götter & Kulte" suchen
  const skill = actor.items.find(i => i.type === "skill" && i.name === "Götter & Kulte");
  if (!skill) {
    ui.notifications.error(`${actor.name} hat keine Fertigkeit "Götter & Kulte".`);
    return;
  }

  // Skill-Test vorbereiten und ausführen
  const setupData = await actor.setupSkill(skill, {}, actor.sheet.getTokenId());
  setupData.testData.opposable = false;
  const res = await actor.basicTest(setupData);

  if (res.result.successLevel > 0) {
    // QS ermitteln
    const qs = res.result.qs ?? res.result.qualityStep ?? 1;

    // Dialog öffnen
    new Dialog({
      title: "Göttliche Vision",
      content: `
        <p>Die Vision, die du wahrnimmst, zeigt dir den Willen deiner Gottheit auf.</p>
        <p>Für <b>${qs}</b> Stunden bekommst du einen Bonus von +1 auf:</p>
      `,
      buttons: {
        mu: {
          label: "MU",
          callback: async () => applyBonus("MU", qs)
        },
        kl: {
          label: "KL",
          callback: async () => applyBonus("KL", qs)
        },
        in: {
          label: "IN",
          callback: async () => applyBonus("IN", qs)
        },
        ch: {
          label: "CH",
          callback: async () => applyBonus("CH", qs)
        }
      }
    }).render(true);

    async function applyBonus(attr, hours) {
      const path = `system.characteristics.${attr.toLowerCase()}.modifier`;

      const effectData = {
        name: `Göttliche Vision (${attr} +1)`,
        icon: "icons/magic/holy/angel-wings-gray.webp",
        origin: actor.uuid,
        duration: { seconds: hours * 3600 },
        changes: [{ key: path, mode: CONST.ACTIVE_EFFECT_MODES.ADD, value: 1 }]
      };

      await actor.createEmbeddedDocuments("ActiveEffect", [effectData]);
      ui.notifications.info(`${actor.name} erhält +1 ${attr} für ${hours} Stunden.`);
    }

  } else {
    ui.notifications.warn(`${actor.name} hat die Probe auf "Götter & Kulte" nicht bestanden.`);
  }
})();
