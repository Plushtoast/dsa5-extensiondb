if (!actor) {
  ui.notifications.error("Kein Actor gefunden – bitte Makro ausführen, während ein Actor ausgewählt ist.");
  return;
}

(async () => {
  console.log(`QS des Zaubers initial: ${qs}`);

  const malus = Math.round(qs / 2) * -1;
  console.log(`Berechneter Malus: ${malus}`);

  // Effekt Juckpulver anwenden
  async function applyJuckpulver() {
    const juckpulver = {
      name: "Juckpulver",
      icon: "icons/svg/aura.svg",
      changes: [
        { key: "system.rangeStats.attack", mode: 2, value: malus },
        { key: "system.status.dodge.gearmodifier", mode: 2, value: malus },
        { key: "system.meleeStats.attack", mode: 2, value: malus },
        { key: "system.skillModifiers.global", mode: 0, value: malus },
        { key: "system.meleeStats.parry", mode: 2, value: malus }
      ],
      duration: { seconds: 30 },
      flags: { dsa5: { description: "Juckpulver", malus: malus } }
    };
    await actor.addCondition(juckpulver);

    ChatMessage.create({
      speaker: { alias: actor.name },
      content: `<b>${actor.name}</b> erliegt dem Juckpulver!`
    });
  }

  // Widerstandsprobe
  const skill = actor.items.find(i => i.type === "skill" && i.name === "Selbstbeherrschung");
  if (!skill) {
    ui.notifications.warn(`${actor.name} kann nicht widerstehen und erleidet sofort den Effekt!`);
    await applyJuckpulver();
    return;
  }

  async function resistanceTest() {
    const setupData = await actor.setupSkill(skill, {}, actor.sheet.getTokenId());
    setupData.testData.opposable = false;
    const res = await actor.basicTest(setupData);
    return res.result.successLevel > 0;
  }

  // Erste Widerstandsprobe
  if (!(await resistanceTest())) {
    ui.notifications.warn(`${actor.name} hat die erste Widerstandsprobe nicht bestanden!`);
    await applyJuckpulver();
    return;
  }
  ui.notifications.info(`${actor.name} widersteht zunächst dem Juckpulver...`);

  // Funktion, die den 1-Minuten-Effekt erstellt
  async function createResistanceEffect() {
    const resistanceEffect = {
      name: "Juckpulver-Widerstand",
      icon: "systems/dsa5/icons/spellicons/spells/juckpulver.webp",
      flags: { dsa5: { description: "Widersteht periodischen Juckpulverproben" } },
      origin: actor.uuid,
      duration: { seconds: 60 } // nur 1 Minute
    };

    const [effect] = await actor.createEmbeddedDocuments("ActiveEffect", [resistanceEffect]);

    // Hook auf Ablauf des Effekts
    Hooks.once("deleteActiveEffect", async (deletedEffect) => {
      if (deletedEffect.id !== effect.id) return;

      // Widerstandsprobe beim Ablauf
      if (await resistanceTest()) {
        ui.notifications.info(`${actor.name} widersteht erneut dem Juckpulver und der Effekt wird erneuert.`);
        await createResistanceEffect(); // Effekt wieder hinzufügen
      } else {
        ui.notifications.warn(`${actor.name} scheitert an der Widerstandsprobe und erleidet den Effekt!`);
        await applyJuckpulver();
      }
    });
  }

  // Effekt initial erstellen
  await createResistanceEffect();

})();
