let selectedActor = canvas.tokens.controlled[0]?.actor || game.user.character;
if (!selectedActor) {
  ui.notifications.error("Bitte wähle einen Token mit verknüpftem Charakter aus.");
  return;
}

let droppedItem = null;

let content = `
<div style="max-height:600px;overflow:auto;">
  <p><b>Alchimistische Verdünnung</b></p>
  <p>Der Zauberer kann ein alchimistisches Elixier verdünnen, sodass daraus zwei Elixiere werden.
  Diese weisen allerdings jeweils eine um 2 niedrigere QS auf. Sollte dadurch die QS auf 0 oder weniger fallen, scheitert die Verdünnung und das Elixier wird unbrauchbar.</p>
  <p>Ziehe ein Heilmittel oder Alchimie-Trank hier hinein. <br>
  Es werden <b>4 AsP</b> abgezogen.</p>
  
  <div id="drop-zone" style="border:2px dashed #666; border-radius:10px; padding:20px; text-align:center; color:#888;">
    Drag & Drop Item hier
  </div>
</div>
`;

new Dialog({
  title: "Alchimistische Verdünnung",
  content: content,
  buttons: {
    cancel: { label: "Abbrechen" },
    dilute: {
      label: "Ausführen",
      callback: async () => {
        if (!droppedItem) {
          ui.notifications.error("Bitte zuerst einen passenden Trank ablegen!");
          return;
        }

        let qs = droppedItem.system.QL || 1;
        let qty = droppedItem.system.quantity.value || 1;

        // Astralenergie prüfen
        let asp = selectedActor.system.status.astralenergy.value;
        if (asp < 4) {
          ui.notifications.error("Nicht genügend AsP!");
          return;
        }

        // 4 AsP abziehen
        await selectedActor.update({"system.status.astralenergy.value": asp - 4});

        // Originalitem um 1 verringern
        if (qty > 1) {
          await droppedItem.update({"system.quantity.value": qty - 1});
        } else {
          await selectedActor.deleteEmbeddedDocuments("Item", [droppedItem.id]);
        }

        // Verdünnung nur, wenn QS > 2
        if (qs > 2) {
          let newItem = duplicate(droppedItem);
          newItem.system.QL = qs - 2;
          newItem.system.quantity.value = 1;
          await selectedActor.createEmbeddedDocuments("Item", [newItem, newItem]);
          ui.notifications.info("Das Elixier wurde verdünnt!");
        } else {
          ui.notifications.info("Die Verdünnung ist gescheitert!");
        }
      }
    }
  },
  render: (html) => {
    let dropZone = html.find("#drop-zone")[0];

    dropZone.ondragover = ev => { ev.preventDefault(); dropZone.style.borderColor = "green"; };
    dropZone.ondragleave = ev => { ev.preventDefault(); dropZone.style.borderColor = "#666"; };

    dropZone.ondrop = async ev => {
      ev.preventDefault();
      dropZone.style.borderColor = "#666";

      let data;
      try { data = JSON.parse(ev.dataTransfer.getData("text/plain")); } catch (err) { return; }

      if (data.type !== "Item") {
        ui.notifications.error("Es können nur Tränke verdünnt werden.");
        return;
      }

      let item = await fromUuid(data.uuid);
      if (!item) return;

      let cat = item.system?.equipmentType?.value;
      if (cat !== "healing" && cat !== "alchemy") {
        ui.notifications.error("Es können nur Heilmittel oder Alchimie-Tränke verdünnt werden.");
        return;
      }

      droppedItem = selectedActor.items.get(item.id);

      // Bild, Name und QS anzeigen
      let qs = droppedItem.system.QL || 1;
      dropZone.innerHTML = `
        <img src="${droppedItem.img}" style="max-width:100px; display:block; margin:0 auto 10px auto;">
        <b>${droppedItem.name}</b><br>
        QS: ${qs}
      `;
    };
  }
}).render(true);
